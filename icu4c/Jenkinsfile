#!groovy
// Copyright (c) 2016-2021 SIL International
// This software is licensed under the MIT license (http://opensource.org/licenses/MIT)

ansiColor('xterm') {
	timestamps {
		def supported_distros = 'focal bionic'
		def supported_arches = 'amd64 i386'
		def x64OnlyDistros = 'focal groovy hirsute'
		properties([
			// Add buildKind parameter
			parameters([
				choice(name: 'buildKind', choices: 'Continuous\nRelease\nReleaseCandidate',
					description: 'Is this a continuous (pre-release) or a release build? Release builds for Linux are uploaded to llso:main.'),
				string(name: 'DistributionsToPackage', defaultValue: supported_distros,
					description: 'The distributions to build packages for (separated by space)'),
				string(name: 'ArchesToPackage', defaultValue: supported_arches,
					description: 'The architectures to build packages for (separated by space)')
			]),
			pipelineTriggers([[$class: 'GitHubPushTrigger']])
		])

		// Set default. This is only needed for the first build.
		def buildKindVar = params.buildKind ?: 'Continuous'
		def distributionsToPackageVar = params.DistributionsToPackage ?: supported_distros
		def archesToPackageVar = params.ArchesToPackage ?: supported_arches

		try {
			isPR = env.BRANCH_NAME.startsWith("PR-") ? true : false
		} catch(err) {
			isPR = false
		}

		try {
			parallel('Windows' : {
				node('windows && supported') {
					def PkgVersion
					def msbuild = tool 'msbuild15'
					def git = tool(name: 'Default', type: 'git')

					stage('Checkout Windows') {
						checkout scm

						def uvernum = readFile 'source/common/unicode/uvernum.h'
						def IcuVersion = (uvernum =~ "#define U_ICU_VERSION_MAJOR_NUM ([0-9]+)")[0][1]
						def IcuMinor = (uvernum =~ "#define U_ICU_VERSION_MINOR_NUM ([0-9]+)")[0][1]
						def PreRelease = isPR ? "-${env.BRANCH_NAME}" :
							(buildKindVar != 'Release' ? "-beta" : "")
						PkgVersion = "${IcuVersion}.${IcuMinor}.${env.BUILD_NUMBER}${PreRelease}"

						currentBuild.displayName = PkgVersion
					}

					dir("nugetpackage") {
						dir("build") {
							stage('Build ICU') {
								echo "Compiling ICU"
								bat """
								dir
								dir ..\\..
								"${msbuild}" /t:Build
								"""
							}

							stage('Pack nuget') {
								echo "Creating nuget package ${PkgVersion}"
								bat """
								"${msbuild}" /t:BuildPackage /p:PkgVersion=${PkgVersion}
								"""
							}
						}

						archiveArtifacts "*.nupkg"

						currentBuild.result = "SUCCESS"
					}
				} // node('windows && supported')
			}, 'Linux': {
				def LinuxPkgVersion
				node('packager') {
					stage('Checkout Linux') {
						sh 'rm -rf *'
						dir('icu-fw') {
							checkout scm

							def uvernum = readFile 'source/common/unicode/uvernum.h'
							def IcuVersion = (uvernum =~ "#define U_ICU_VERSION_MAJOR_NUM ([0-9]+)")[0][1]
							def IcuMinor = (uvernum =~ "#define U_ICU_VERSION_MINOR_NUM ([0-9]+)")[0][1]
							String pr
							try {
								pr = isPR ? (env.BRANCH_NAME =~ "PR-([0-9]+)")[0][1] : ""
							} catch(err) {
								pr = ""
							}
							def Build = isPR ? "~PR${pr}.${env.BUILD_NUMBER}" :
								(buildKindVar != 'Release' ? "~beta${env.BUILD_NUMBER}" : ".${env.BUILD_NUMBER}")
							LinuxPkgVersion = "${IcuVersion}.${IcuMinor}.1${Build}"
						}
					}
					stage('Linux Source Package') {
						echo "Creating source package ${LinuxPkgVersion}"
						sh """#!/bin/bash
							export FULL_BUILD_NUMBER=${LinuxPkgVersion}

							if [ "${buildKindVar}" = "Release" ]; then
								MAKE_SOURCE_ARGS="--preserve-changelog"
							elif [ "${buildKindVar}" = "ReleaseCandidate" ]; then
								MAKE_SOURCE_ARGS="--preserve-changelog"
							fi

							cd "icu-fw"
							\$HOME/ci-builder-scripts/bash/make-source --dists "${distributionsToPackageVar}" \
								--arches "${archesToPackageVar}" \
								--main-package-name "icu-fw" \
								--supported-distros "${supported_distros}" \
								--debkeyid \$DEBSIGNKEY \
								--main-repo-dir . \
								--package-version "${LinuxPkgVersion}" \
								\$MAKE_SOURCE_ARGS
						"""
					} // stage('Package')
					stash name: 'Linux', includes: "icu-fw/,icu-fw_${LinuxPkgVersion}*"
				} // node('packager')

				def tasks = [:]
				for (d in distributionsToPackageVar.tokenize()) {
					def dist = d //! don't inline!
					tasks["Package build for ${dist}"] = {
						for (a in archesToPackageVar.tokenize()) {

							def arch = a //! don't inline!

							if (arch == 'i386' && x64OnlyDistros.contains(dist)) {
								// we don't build packages for 32-bit on focal and later
								continue
							}

							node('packager') {
								sh 'rm -rf *'
								unstash name: 'Linux'

								stage("Package ${dist}/${arch}") {
									echo "Creating package ${LinuxPkgVersion} for ${dist}/${arch}"
									sh """#!/bin/bash
										export FULL_BUILD_NUMBER=${LinuxPkgVersion}

										if [ "${buildKindVar}" = "Release" ]; then
											BUILD_PACKAGE_ARGS="--suite-name main"
										elif [ "${buildKindVar}" = "ReleaseCandidate" ]; then
											BUILD_PACKAGE_ARGS="--no-upload"
										fi

										if ${isPR}; then
											BUILD_PACKAGE_ARGS="--no-upload"
										fi

										cd "icu-fw"
										\$HOME/ci-builder-scripts/bash/build-package --dists "${dist}" \
											--arches "${arch}" \
											--main-package-name "icu-fw" \
											--supported-distros "${supported_distros}" \
											--debkeyid \$DEBSIGNKEY \
											\$BUILD_PACKAGE_ARGS
										"""

									archiveArtifacts artifacts: 'results/*'
								} // stage('Package')
							} // node('packager')
						} // for (a in archesToPackageVar
					} // tasks["Package build for ${d}"]
				} // for (d in distributionsToPackageVar

				tasks.failFast = true
				parallel tasks
			}) // parallel Windows/Linux
		} catch(error) {
			echo error
			currentBuild.result = "FAILED"
		}
	} // timestamps
} // ansiColor
